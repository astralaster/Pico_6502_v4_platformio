// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// address //
// ------- //

#define address_wrap_target 0
#define address_wrap 9

static const uint16_t address_program_instructions[] = {
            //     .wrap_target
    0x20c0, //  0: wait   1 irq, 0                   
    0xbf42, //  1: nop                           [31]
    0xe006, //  2: set    pins, 6                    
    0xbf42, //  3: nop                           [31]
    0x4008, //  4: in     pins, 8                    
    0xe005, //  5: set    pins, 5                    
    0xbf42, //  6: nop                           [31]
    0x4008, //  7: in     pins, 8                    
    0xa0e6, //  8: mov    osr, isr                   
    0x8020, //  9: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program address_program = {
    .instructions = address_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config address_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + address_wrap_target, offset + address_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
void address_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, 0);
   pio_gpio_init(pio, 1);
   pio_gpio_init(pio, 2);
   pio_gpio_init(pio, 3);
   pio_gpio_init(pio, 4);
   pio_gpio_init(pio, 5);
   pio_gpio_init(pio, 6);
   pio_gpio_init(pio, 7);
   pio_gpio_init(pio, 8);
   pio_gpio_init(pio, 9);
   pio_gpio_init(pio, 10);
   pio_sm_set_consecutive_pindirs(pio, sm, 0, 8, false);
   pio_sm_set_consecutive_pindirs(pio, sm, 8, 3, true);
   pio_sm_config c = address_program_get_default_config(offset);
   sm_config_set_set_pins(&c, 8, 3);
   sm_config_set_in_pins(&c, 0);
   pio_sm_init(pio, sm, offset, &c);
}

#endif

